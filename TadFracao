# TAD
# Tipo Abstrato de Dados
def mdc(a, b):
    while b != 0:
        r = a % b
        a = b
        b = r
    return a


class Fracao():
    denominador = 1
    numerador = 1

    def __init__(self, numerador, denominador):
        self.numerador = numerador
        self.denominador = denominador

    def add(self, fracao):
        num = (self.numerador * fracao.denominador) + (fracao.numerador * self.denominador)
        den = self.denominador * fracao.denominador
        return Fracao(num, den)

    def sub(self, fracao):
        num = (self.numerador * fracao.denominador) - (fracao.numerador * self.denominador)
        den = self.denominador * fracao.denominador
        return Fracao(num, den)

    def mul(self, fracao):
        num = self.numerador * fracao.denominador
        den = self.denominador * fracao.denominador
        return Fracao(num, den)

    def simplify(self):
        s = mdc(self.numerador, self.denominador)
        return f"{int(self.numerador/s)}/{int(self.denominador/s)}"

    def solve(self):
        return self.numerador / self.denominador

    def __str__(self):
        return f"{self.numerador}/{self.denominador}"


fracao1 = Fracao(5, 2)
fracao2 = Fracao(10, 5)
fracao3 = fracao1.add(fracao2)
fracao4 = fracao1.sub(fracao2)
fracao5 = fracao1.mul(fracao2)

print(f"fracao1: {fracao1.simplify()}")
print(f"fracao2: {fracao2.simplify()}")
print(f"fracao3: {fracao3.simplify()}")
print(f"fracao4: {fracao4.simplify()}")
print(f"fracao5: {fracao5.simplify()}")
